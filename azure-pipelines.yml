trigger:
  branches:
    include:
      - main
      - dev
      - feature/*

variables:
  buildConfiguration: 'Release'
  solution: 'EventDrivenMicroservicesSolution.sln'
  runSettingsFile: 'coverlet.runsettings'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        displayName: 'Build Solution'
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self

          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '9.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet packages'
            inputs:
              command: 'restore'
              projects: '$(solution)'

          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Output'
            inputs:
              targetPath: '$(Build.SourcesDirectory)'
              artifact: 'build-output'

  - stage: TestAndAnalyze
    displayName: 'Run Tests and Code Analysis'
    dependsOn: Build
    jobs:
      - job: Test
        displayName: 'Run Tests and Code Coverage'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Output'
            inputs:
              artifact: 'build-output'
              path: '$(Build.SourcesDirectory)'

          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '9.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud Analysis'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '$(SONAR_ORGANIZATION)'
              scannerMode: 'dotnet'
              projectKey: '$(SONAR_PROJECT_KEY)'
              projectName: 'EventDrivenMicroservicesSolution'
              extraProperties: |
                sonar.exclusions=**/bin/**,**/obj/**
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/**/coverage.opencover.xml

          - task: DotNetCoreCLI@2
            displayName: 'Run Tests with Code Coverage'
            inputs:
              command: 'test'
              projects: '**/tests/**/*.csproj'
              arguments: >
                --no-build
                --configuration $(buildConfiguration)
                --collect:"XPlat Code Coverage"
                --settings $(Build.SourcesDirectory)/$(runSettingsFile)
                --results-directory $(Build.SourcesDirectory)/TestResults
              publishTestResults: true

          - task: PowerShell@2
            displayName: 'Debug: List TestResults Contents'
            inputs:
                targetType: 'inline'
                script: |
                  Write-Host "Listing contents of TestResults..."
                  Get-ChildItem -Recurse "$(Build.SourcesDirectory)/TestResults"

          - task: ReportGenerator@5
            displayName: 'Generate Code Coverage Report'
            inputs:
              reports: '$(Build.SourcesDirectory)/TestResults/**/coverage.cobertura.xml'
              targetdir: '$(Build.ArtifactStagingDirectory)/CoverageReport'
              reporttypes: 'HtmlInline_AzurePipelines;Cobertura'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.ArtifactStagingDirectory)/CoverageReport/Cobertura.xml'

          - task: SonarCloudAnalyze@3
            displayName: 'Run SonarCloud Analysis'

          - task: SonarCloudPublish@3
            displayName: 'Publish SonarCloud Results'
            inputs:
              pollingTimeoutSec: '300'
